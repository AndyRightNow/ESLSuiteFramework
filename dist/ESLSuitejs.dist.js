(function() { var INLINEIMPORTSRETVARNAME = {}; "use strict";var ESLSuite = (function() { return {    NONE: "none",    OPACITY_0: "opacity0",    MOBILE_WIDTH: 601,    TABLET_WIDTH: 992,    Util: {        addCSS: function (jqueryObject, classObject) {            if (typeof jqueryObject !== "undefined" && typeof classObject !== "undefined") {                for (let prop in classObject) {                    jqueryObject.css(prop, classObject[prop]);                }            }        },        isMobile: function () {            return $(window).width() <= ESLSuite.MOBILE_WIDTH;        },        isInRange: function (number, rangeLow, rangeHigh) {            return number >= rangeLow && number <= rangeHigh;        },        getAttrAsNumber: function (jqueryObject, attrName) {            if (typeof jqueryObject !== "undefined") {                if (typeof attrName === "string") {                    return parseFloat(jqueryObject.attr(attrName));                }            }            return NaN;        },        getCSSAsNumber: function (jqueryObject, propertyName) {            if (typeof jqueryObject !== "undefined") {                if (typeof propertyName === "string") {                    return parseFloat(jqueryObject.css(propertyName));                }            }            return NaN;        },        clamp: function (value, low, high) {            return value < low ? low : value > high ? high : value;        },        getNumbersFromString: function (str) {            if (typeof str !== "undefined") {                var regEx = /\d+/;                var matched = str.match(regEx);                if (matched !== null) {                    for (let i = 0; i < matched.length; i++) {                        matched[i] = parseFloat(matched[i]);                    }                }                return matched;            }        },        getPropertyCount: function (obj) {            var cnt = 0;            for (let prop in obj) {                cnt++;            }            return cnt;        }    }}; })();;var ESLSuiteAPI = (function() { return {    PopOutWindow: {        _rebindState: false,        _changeRebindState: function (state) {            ESLSuiteAPI.PopOutWindow._rebindState = state;        },        rebindElements: function () {            ESLSuiteAPI.PopOutWindow._changeRebindState(true);        }    }}; })();;$(document).ready(() => {  (function() {return  (function () {    const FADE_FROM_BOTTOM = "scroll-show-fade-from-bottom",      SCALE_IN = "scroll-show-scale-in",      SCROLL_SHOW = 'scroll-show',      TRANSITION_600MS = "transition-600ms",      TRANSITION_TIME = 600;    var isCurrentElementShown = false,      canGetNextElement = true,      currElem,      removeTransitionQueue = [];    $("." + SCROLL_SHOW).addClass(TRANSITION_600MS);    var ScrollToShowEventLoop = setInterval(() => {      var elements = Array.from($("." + SCROLL_SHOW));      if (!elements ||        typeof elements === "undefined" ||        elements.length === 0) {        clearInterval(ScrollToShowEventLoop);      }      if (canGetNextElement) {        currElem = elements.shift();        isCurrentElementShown = false;        canGetNextElement = false;      }      if (!isCurrentElementShown) {        if (typeof currElem !== "undefined") {          let windowBottom = $(window).scrollTop() + $(window).height(),            curEleBottom = $(currElem).offset().top + $(currElem).height();          if (windowBottom >= curEleBottom) {            $(currElem).removeClass(SCROLL_SHOW);            if ($(currElem).hasClass(FADE_FROM_BOTTOM)) {              $(currElem).removeClass(FADE_FROM_BOTTOM);            } else if ($(currElem).hasClass(SCALE_IN)) {              $(currElem).removeClass(SCALE_IN);            }            removeTransitionQueue.push(currElem);            setTimeout(function () {              if (removeTransitionQueue.length > 0) {                let topEle = removeTransitionQueue[0];                if (!$(topEle).hasClass(SCROLL_SHOW)) {                  $(topEle).removeClass(TRANSITION_600MS);                  removeTransitionQueue.shift();                }              }            }, TRANSITION_TIME);            canGetNextElement = true;            isCurrentElementShown = true;          }        }      }    });  })(); })();;  (function() {return  (function () {    const ANIMATE_TIME = 600;    $(".scroll-link").on('click', function (event) {      var thisHref = $(event.target).attr('href');      if (typeof thisHref !== "undefined") {        if (thisHref[0] === '#') {          event.preventDefault();          let thisHash = this.hash;          $('html, body').animate({            scrollTop: $(thisHash).offset().top          }, ANIMATE_TIME, () => {            window.location.hash = thisHash;          });        }      }    });  })(); })();;  (function() { ;;return  (function () {    const SHOW_PROP = "translate(-50%, -50%) scale(1)",      HIDE_PROP = "translate(-50%, -50%) scale(0)",      ANIMATE_TIME = 400,      NO_OVERFLOW = "nooverflow",      POP_CONT_MAX = 50,      POP_BUTTON_NO_MOBILE = "popbtn-nomobile",      MOBILE_WINDOW_WIDTH = "100vw",      MOBILE_WINDOW_HEIGHT = "80vh",      POP_OVER_BACKGROUND = "popoverbg",      POP_OVER_WINDOW = "popoverwnd",      POP_OVER_CONTENT = "popovercontent",      POP_BTN = "popbtn",      POP_CONT = "popcont";    (function () {      var bg = "<div class='" + POP_OVER_BACKGROUND + " " + ESLSuite.NONE + "'></div>";      $(bg).appendTo('body');      var wnd = "<div class='" + POP_OVER_WINDOW + " whiteback text-center'></div>";      $(wnd).appendTo("." + POP_OVER_BACKGROUND);      var closebtn = "<div class='close glyphicon glyphicon-remove'></div>";      $(closebtn).appendTo("." + POP_OVER_WINDOW);      $("." + POP_OVER_CONTENT).appendTo("." + POP_OVER_WINDOW).removeClass(ESLSuite.NONE);    })();    var background = $("." + POP_OVER_BACKGROUND),      wnd = $("." + POP_OVER_WINDOW),      close = $('.close');    var curPopCont = null;    function transform(jqueryObject, propValue) {      if (typeof jqueryObject !== "undefined" &&        typeof propValue !== "undefined") {        jqueryObject.css("transform", propValue);        jqueryObject.css("-webkit-transform", propValue);        jqueryObject.css("-o-transform", propValue);        jqueryObject.css("-moz-transform", propValue);      }    }    function bindButtonClickEvents() {      for (let i = 1; i <= POP_CONT_MAX; i++) {        let thisCont = POP_CONT + i,          thisBtn = POP_BTN + i,          thisBtnElements = $("." + thisBtn);        if (typeof thisBtnElements !== "undefined" &&          thisBtnElements.length > 0) {          for (let j = 0; j < thisBtnElements.length; j++) {            $(thisBtnElements[j]).click((event) => {              if (ESLSuite.Util.isMobile()) {                wnd.css("width", MOBILE_WINDOW_WIDTH);              }              if (!ESLSuite.Util.isMobile() ||                (ESLSuite.Util.isMobile() && !$("." + thisBtn).hasClass(POP_BUTTON_NO_MOBILE))) {                event.preventDefault();                background.fadeIn(ANIMATE_TIME);                background.removeClass(ESLSuite.NONE);                transform(wnd, SHOW_PROP);                $('html').toggleClass(NO_OVERFLOW);                curPopCont = $("." + thisCont);                curPopCont.removeClass(ESLSuite.NONE);              }            });          }        }      }    }    function clearButtonClickEvents() {      for (let i = 1; i <= POP_CONT_MAX; i++) {        let thisBtn = "." + POP_BTN + i;        $(thisBtn).off("click");      }    }    for (let i = 1; i <= POP_CONT_MAX; i++) {      let thisContClass = "." + POP_CONT + i;      if (!$(thisContClass).hasClass(ESLSuite.NONE)) {        $(thisContClass).addClass(ESLSuite.NONE);      }    }    setTimeout(() => {      bindButtonClickEvents();    });    var ESLSuiteAPI_PopOutWindow_EventLoop = setInterval(() => {      if (ESLSuiteAPI.PopOutWindow._rebindState) {        clearButtonClickEvents();        bindButtonClickEvents();        ESLSuiteAPI.PopOutWindow._changeRebindState(false);      }    });    close.click(function (event) {      transform(wnd, HIDE_PROP);      $("html").toggleClass(NO_OVERFLOW);      background.fadeOut(ANIMATE_TIME);      setTimeout(function () {        curPopCont.toggleClass(ESLSuite.NONE);      }, ANIMATE_TIME);    });  })(); })();;  (function() { ;return  (function () {    const ALL = "All",      HALF = "Half",      QUARTER = "Quarter",      NUM_TO_SHOW = "num-to-show",      HIDDEN_ITEM = "hiddenitem";    var hiddenItems = $("." + HIDDEN_ITEM),      showBtn = $(".showhiddenitembtn"),      numToShow = ALL;    var specifiedNumToShow = showBtn.attr(NUM_TO_SHOW);    if (typeof specifiedNumToShow !== "undefined") {      let thisNum = parseInt(specifiedNumToShow);      if (!isNaN(thisNum)) {        numToShow = thisNum;      } else {        switch (specifiedNumToShow) {          case HALF:            numToShow = hiddenItems.length / 2;            break;          case QUARTER:            numToShow = hiddenItems.length / 4;            break;        }      }    }    showBtn.click((event) => {      if (hiddenItems.length > 0) {        if (numToShow === ALL ||          hiddenItems.length <= numToShow) {          hiddenItems.removeClass(HIDDEN_ITEM);          showBtn.addClass(ESLSuite.NONE);        }        else {          for (let i = 0; i < numToShow; i++) {            $(hiddenItems[i]).removeClass(HIDDEN_ITEM);          }        }      }      hiddenItems = $("." + HIDDEN_ITEM);    });  })(); })();;  (function() { ;return  (function () {    var items = $(".auto-fade-item"),      index = 0,      maxHeight = 0;    const INTERVAL_TIME = 7000,      TRANSITION_TIME = 400,      AUTO_ADJUST_HEIGHT = "auto-adjust-height";    if (items.length > 0) {      items.addClass('transition').addClass(ESLSuite.OPACITY_0).addClass(ESLSuite.NONE);      $(items[index]).removeClass(ESLSuite.NONE).removeClass(ESLSuite.OPACITY_0);      var autoFadeCarouselInterval = setInterval(() => {          if (items.parent().hasClass(AUTO_ADJUST_HEIGHT)) {            let thisHeight = $(items[index]).outerHeight();            if (thisHeight > maxHeight) {              maxHeight = thisHeight;              items.parent().css("height", maxHeight * 1.15);            }          }          $(items[index]).addClass(ESLSuite.OPACITY_0);          setTimeout(() => {            $(items[index]).addClass(ESLSuite.NONE);            index = (index + 1) % items.length;            $(items[index]).removeClass(ESLSuite.NONE);            setTimeout(() => {              $(items[index]).removeClass(ESLSuite.OPACITY_0);            }, TRANSITION_TIME / 2);          }, TRANSITION_TIME);        },        INTERVAL_TIME);    }  })(); })();;  (function() { ;return  (function () {    const SIBLING = "Sibling",      ADAPT_OUTER_HEIGHT = "adapt-outer-height",      ADAPT_HEIGHT = "adapt-height",      ATTR_VALUE_REGEX = /^Sibling-\d+$/;    var adaptHeightElements = $("[" + ADAPT_HEIGHT + "]"),      adaptOuterHeightElements = $("[" + ADAPT_OUTER_HEIGHT + "]");    function adjustHeight(elements, isOuter) {      var val;      for (var i = 0, ll = elements.length; i < ll; i++) {        val = elements[i];        let attrVal = $(val).attr(isOuter ?          ADAPT_OUTER_HEIGHT : ADAPT_HEIGHT);        let matchRes = attrVal.match(ATTR_VALUE_REGEX);        if (matchRes !== null) {          attrVal = matchRes[0];          let siblingIndex = ESLSuite.Util.getNumbersFromString(attrVal)[0] - 1;          let thisSibling = $(val).siblings()[siblingIndex];          if (typeof thisSibling !== "undefined" &&            thisSibling.length !== 0) {            let thisHeight = isOuter ?              $(thisSibling).outerHeight() : $(thisSibling).height();            $(val).height(thisHeight);          }        }      }    }    var adaptHeightInterval = setInterval(() => {      let isAllInvalid = true;      if (typeof adaptHeightElements !== "undefined" &&        adaptHeightElements.length !== 0) {        isAllInvalid = false;        adjustHeight(adaptHeightElements, false);      }      if (typeof adaptOuterHeightElements !== "undefined" &&        adaptOuterHeightElements.length !== 0) {        isAllInvalid = false;        adjustHeight(adaptOuterHeightElements, true);      }      if (isAllInvalid) {        clearInterval(adaptHeightInterval);      }    });  })(); })();;  (function() { ;return  (function () {    const COUNT_DOWN_YEAR = "count-down-year",      COUNT_DOWN_MONTH = "count-down-month",      COUNT_DOWN_DAY = "count-down-day",      COUNT_DOWN_HOUR = "count-down-hour",      COUNT_DOWN_MINUTE = "count-down-minute",      COUNT_DOWN_SECOND = "count-down-second",      COUNT_DOWN_YEAR_CLASS = ".count-down-year",      COUNT_DOWN_MONTH_CLASS = ".count-down-month",      COUNT_DOWN_DAY_CLASS = ".count-down-day",      COUNT_DOWN_HOUR_CLASS = ".count-down-hour",      COUNT_DOWN_MINUTE_CLASS = ".count-down-minute",      COUNT_DOWN_SECOND_CLASS = ".count-down-second",      COUNT_DOWN_STATE_ATTR = "count-down-state",      COUNT_DOWN_START_ATTR = "count-down-start",      COUNT_DOWN_END_ATTR = "count-down-end",      TIME_ZONE_ATTR = "time-zone",      COUNT_DOWN_WRAPPER_CLASS = ".count-down";    const YEAR_SEC = 31536000,      MONTH_SEC = 2592000,      DAY_SEC = 86400,      HOUR_SEC = 3600,      MIN_SEC = 60;    var date, UTCYear, UTCMonth, UTCDate, UTCHour, UTCMin, UTCSec, UTCTimeInMillisec;    function getCurrentUTCTime() {      date = new Date();      UTCYear = date.getUTCFullYear();      UTCMonth = date.getUTCMonth();      UTCDate = date.getUTCDate();      UTCHour = date.getUTCHours();      UTCMin = date.getUTCMinutes();      UTCSec = date.getUTCSeconds();      UTCTimeInMillisec = Date.UTC(        UTCYear,        UTCMonth,        UTCDate,        UTCHour,        UTCMin,        UTCSec);    }    function formatTimeFromSeconds(time) {      var y = parseInt(time / YEAR_SEC);      time -= (y * YEAR_SEC);      var mo = parseInt(time / MONTH_SEC);      time -= (mo * MONTH_SEC);      var d = parseInt(time / DAY_SEC);      time -= (d * DAY_SEC);      var h = parseInt(time / HOUR_SEC);      time -= (h * HOUR_SEC);      var m = parseInt(time / MIN_SEC);      time -= (m * MIN_SEC);      var s = time;      return {        year: y,        month: mo,        day: d,        hour: h,        minute: m,        second: s      };    }    var countDownWrapper = $(COUNT_DOWN_WRAPPER_CLASS);    if (typeof countDownWrapper !== "undefined" &&      countDownWrapper.length !== 0) {      $(COUNT_DOWN_YEAR_CLASS).text("0");      $(COUNT_DOWN_MONTH_CLASS).text("0");      $(COUNT_DOWN_DAY_CLASS).text("0");      $(COUNT_DOWN_HOUR_CLASS).text("0");      $(COUNT_DOWN_MINUTE_CLASS).text("0");      $(COUNT_DOWN_SECOND_CLASS).text("0");      let countDownStart = Date.parse(countDownWrapper.attr(COUNT_DOWN_START_ATTR));      let countDownEnd = Date.parse(countDownWrapper.attr(COUNT_DOWN_END_ATTR));      if (!isNaN(countDownStart) &&        !isNaN(countDownEnd)) {        let timeZone = ESLSuite.Util.getAttrAsNumber(TIME_ZONE_ATTR);        if (!isNaN(timeZone)) {          if (timeZone > 12 || timeZone < -12) {            timeZone = 0;          }        } else {          timeZone = 0;        }        let countDownState = countDownWrapper.attr(COUNT_DOWN_STATE_ATTR);        countDownState =          typeof countDownState === "undefined" ||          (countDownState !== "On" && countDownState !== "Off") ?          false : countDownState === "On" ? true : false;        getCurrentUTCTime();        if (UTCTimeInMillisec < countDownStart ||          UTCTimeInMillisec > countDownEnd) {          countDownState = false;        }        countDownWrapper.attr(COUNT_DOWN_STATE_ATTR, countDownState ? "On" : "Off");        if (countDownState) {          var CountDownTimerInterval = setInterval(() => {            getCurrentUTCTime();            var timeDifPeroidInSec = (countDownEnd - UTCTimeInMillisec) / 1000;            var extractedTime = formatTimeFromSeconds(timeDifPeroidInSec);            $(COUNT_DOWN_YEAR_CLASS).text(extractedTime.year);            $(COUNT_DOWN_MONTH_CLASS).text(extractedTime.month);            $(COUNT_DOWN_DAY_CLASS).text(extractedTime.day);            $(COUNT_DOWN_HOUR_CLASS).text(extractedTime.hour);            $(COUNT_DOWN_MINUTE_CLASS).text(extractedTime.minute);            $(COUNT_DOWN_SECOND_CLASS).text(extractedTime.second);          }, 999);        }      }    }  })(); })();;  (function() { ;return  (function () {    var Position = function (x, y) {      this.x = x || 0;      this.y = y || 0;    };    const SCROLL_CAROUSEL_WRAPPER_CALSS = ".scroll-carousel",      SCROLL_CAROUSEL_INNER_WRAPPER_CALSS = ".scroll-carousel-inner",      SCROLL_CAROUSEL_ITEM_CALSS = ".scroll-carousel-item",      CAROUSEL_AUTO_PLAY_ATTR = "carousel-auto-play",      CAROUSEL_AUTO_PLAY_SPEED_ATTR = "carousel-auto-play-speed",      CAROUSEL_DRAGGABLE_ATTR = "carousel-draggable",      DRAG_FACTOR = 0.5,      LOOP_RESET_THRESHOLD = 1;    var scrollCarouselInnerWrapper,      scrollCarouselWrapper,      carouselItems,      mouseUp,      mouseDown,      mouseIn,      mouseOut,      mouseMove,      lastMousePos = new Position(),      currentMousePos = new Position(),      draggingMousePos = new Position(),      isDragging = false,      isDraggable = false;    function bindMouseEvents() {      var objectsToBind = carouselItems;      if (typeof objectsToBind !== "undefined" &&        objectsToBind.length !== 0) {        objectsToBind.find('*').css("pointer-events", ESLSuite.NONE);        objectsToBind.mouseenter(() => {          mouseIn = true;          mouseDown = false;        });        objectsToBind.mouseout(() => {          mouseIn = false;          mouseDown = false;        });        objectsToBind.mousedown(() => {          mouseDown = true;          mouseUp = false;        });        objectsToBind.mouseup(() => {          mouseUp = true;          mouseDown = false;        });      }    }    scrollCarouselWrapper = $(SCROLL_CAROUSEL_WRAPPER_CALSS);    if (typeof scrollCarouselWrapper !== "undefined" &&      scrollCarouselWrapper.length !== 0) {      carouselItems = scrollCarouselWrapper.find(SCROLL_CAROUSEL_ITEM_CALSS);      if (scrollCarouselWrapper.attr(CAROUSEL_DRAGGABLE_ATTR) == "On") {        isDraggable = true;      }      if (typeof carouselItems !== "undefined" &&        carouselItems.length !== 0) {        let maxElementsToShow = Math.ceil(scrollCarouselWrapper.width() / carouselItems.width());        let innerWrapper = "<div class='scroll-carousel-inner'></div>";        $(innerWrapper).prependTo(SCROLL_CAROUSEL_WRAPPER_CALSS);        scrollCarouselInnerWrapper = $(SCROLL_CAROUSEL_INNER_WRAPPER_CALSS);        let isAutoPlay = scrollCarouselWrapper.attr(CAROUSEL_AUTO_PLAY_ATTR);        isAutoPlay = typeof isAutoPlay === "undefined" || isAutoPlay == "Off" ?          false : isAutoPlay === "On" ?          true : false;        for (let i = 0; i < maxElementsToShow; i++) {          $(carouselItems[i]).clone().appendTo(scrollCarouselWrapper);        }        carouselItems = $(SCROLL_CAROUSEL_ITEM_CALSS);        var originalElementsCount = carouselItems.length - maxElementsToShow;        let itemsWidthSum = carouselItems.width() * carouselItems.length;        let innerWrapperCSS = {          "width": itemsWidthSum * 1.5,          "position": "relative",          "left": 0,          "top": "50%",          "transform": "translateY(-50%)",          "-webkit-transform": "translateY(-50%)",          "-o-transform": "translateY(-50%)",          "-moz-transform": "translateY(-50%)",        };        ESLSuite.Util.addCSS(scrollCarouselInnerWrapper, innerWrapperCSS);        carouselItems.appendTo(SCROLL_CAROUSEL_INNER_WRAPPER_CALSS);        carouselItems.mousemove((event) => {          lastMousePos.x = currentMousePos.x;          lastMousePos.y = currentMousePos.y;          currentMousePos.x = event.pageX;          currentMousePos.y = event.pageY;          isDragging = false;          if (mouseIn && mouseDown) {            isDragging = true;          }        });        bindMouseEvents();        var loopSpeed = ESLSuite.Util.getAttrAsNumber(scrollCarouselWrapper, CAROUSEL_AUTO_PLAY_SPEED_ATTR);        loopSpeed = isNaN(loopSpeed) ? 0.5 : loopSpeed;        var resetPos = originalElementsCount * $(carouselItems[0]).outerWidth(true);        const startPos = ESLSuite.Util.getCSSAsNumber(scrollCarouselInnerWrapper, "left");        var scrollCarouselEventLoop = setInterval(() => {          var currentPos = ESLSuite.Util.getCSSAsNumber(scrollCarouselInnerWrapper, "left");          if (!isDraggable) {            if (isAutoPlay) {              currentPos -= loopSpeed;            }          } else {            if (!isDragging && isAutoPlay) {              currentPos -= loopSpeed;            } else if (isDragging) {              currentPos += (0.5 * (currentMousePos.x - lastMousePos.x));            }          }          if (ESLSuite.Util.isInRange(Math.abs(currentPos),              resetPos - LOOP_RESET_THRESHOLD,              resetPos + LOOP_RESET_THRESHOLD)) {            currentPos = 0;          }          currentPos = ESLSuite.Util.clamp(currentPos, -resetPos, startPos);          scrollCarouselInnerWrapper.css("left", currentPos);        });      }    }  })(); })();;  (function() { ;return  (function () {    ESLSuite.MultikeyQueryContainer = function () {      this._keyCount = 0;      this._data = {};      this._size = 0;      switch (arguments.length) {        case 0:          {            var msg = "MultiKeyQueryContainer constructor must have arguments!";            throw new Error(msg);          }        case 1:          {            if (typeof arguments[0] === "number") {              this._keyCount = arguments[0];            }            break;          }      }    };    ESLSuite.MultikeyQueryContainer.prototype.get = function (keys) {      return this._getDataInTables(this._findTables(keys));    };    ESLSuite.MultikeyQueryContainer.prototype.insert = function (keys, element) {      var tables = this._findTables(keys);      if (typeof tables === "undefined") {        return;      }      if (Array.isArray(tables)) {        for (let i = 0; i < tables.length; i++) {          tables[i].Data.push(element);        }      }      else {        let index = tables.Index;        tables = tables.Result;        for (let i = 0; i < tables.length; i++) {          tables[i][keys[index]] = {};          let subTable = tables[i][keys[index]];          for (let j = index + 1; j < this._keyCount; j++) {            subTable[keys[j]] = {};            subTable = subTable[keys[j]];          }          subTable.Data = [element];        }      }      return;    };    ESLSuite.MultikeyQueryContainer.prototype._findTables = function (keys) {      if (!Array.isArray(keys)) {        throw new Error("The parameter is not an array!");      } else {        if (keys.length !== this._keyCount) {          throw new Error("The passed in keys'length does not match the key count of the container!");        } else {          var tables = [this._data];          var res;          for (let i = 0; i < keys.length; i++) {            res = this.__findTablesHelper(keys[i], tables);            if (typeof res === "undefined") {              return undefined;            } else {              if (!res) {                res = {                  Result: tables,                  Index: i                };                return res;              }            }            tables = res;          }          return tables;        }      }    };    ESLSuite.MultikeyQueryContainer.prototype.__findTablesHelper = function (key, tables) {      if (typeof key !== "string" ||        !Array.isArray(tables)) {        return undefined;      }      var ret = [];      var notFound = true;      for (let i = 0; i < tables.length; i++) {        if (key === "") {          for (let t in tables[i]) {            notFound = false;            ret.push(tables[i][t]);          }        } else if (tables[i].hasOwnProperty(key)) {          notFound = false;          ret.push(tables[i][key]);        }      }      if (notFound) {        return false;      }      return ret;    };    ESLSuite.MultikeyQueryContainer.prototype._getDataInTables = function (tables) {      var ret = [];      if (typeof tables === "undefined" ||        !Array.isArray(tables)) {        return ret;      }      for (let i = 0; i < tables.length; i++) {        ret = ret.concat(tables[i].Data);      }      return ret;    };  })(); })();;}); return INLINEIMPORTSRETVARNAME; })();